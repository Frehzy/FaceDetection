<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        YII=
</value>
  </data>
</root>